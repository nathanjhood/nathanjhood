// Need to use the React-specific entry point to import `createApi`
import redux = require("@reduxjs/toolkit/query/react")

declare namespace QuotesApi {
  interface Quote {
    id: number
    quote: string
    author: string
  }
  interface Response {
    quotes: Quote[]
    total: number
    skip: number
    limit: number
  }
}

// Define a service using a base URL and expected endpoints
const quotesApiSlice = redux.createApi({
  baseQuery: redux.fetchBaseQuery({ baseUrl: "https://dummyjson.com/quotes" }),
  reducerPath: "quotesApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Quotes"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getQuotes: build.query<QuotesApi.Response, number>({
      query: (limit = 10) => `?limit=${limit}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (_result, _error, id) => [{ type: "Quotes", id }],
    }),
  }),
});
// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
const useGetQuotesQuery = quotesApiSlice['useGetQuotesQuery']

interface QuotesApi {
  quotesApiSlice: typeof quotesApiSlice,
  useGetQuotesQuery: typeof useGetQuotesQuery
}

const QuotesApi: QuotesApi = {
  quotesApiSlice, useGetQuotesQuery
}

export = QuotesApi
